package array;

/**
 * Created by heyixin on 2017/3/20.
 * 在4x4的棋盘上摆满了黑白棋子，黑白两色的位置和数目随机其中左上角坐标为(1,1),右下角坐标为(4,4),现在依次有一些翻转操作，要对一些给定支点坐标为中心的上下左右四个棋子的颜色进行翻转，请计算出翻转后的棋盘颜色。
 * 给定两个数组A和f,分别为初始棋盘和翻转位置。其中翻转位置共有3个。请返回翻转后的棋盘。
 * 测试样例：
 * [[0,0,1,1],[1,0,1,0],[0,1,1,0],[0,0,1,0]],[[2,2],[3,3],[4,4]]
 * 返回：[[0,1,1,1],[0,0,1,0],[0,1,1,0],[0,0,1,0]]
 */
public class Flip {
    public int[][] flipChess(int[][] A, int[][] f) {
        // write code here

        for (int i = 0; i < 3; i++) {
            if (f[i][0] < 4) A[f[i][0]][f[i][1] - 1] = A[f[i][0]][f[i][1] - 1] == 0 ? 1 : 0;
            if (f[i][1] < 4) A[f[i][0] - 1][f[i][1]] = A[f[i][0] - 1][f[i][1]] == 0 ? 1 : 0;
            if (f[i][0] > 1) A[f[i][0] - 2][f[i][1] - 1] = A[f[i][0] - 2][f[i][1] - 1] == 0 ? 1 : 0;
            if (f[i][1] > 1) A[f[i][0] - 1][f[i][1] - 2] = A[f[i][0] - 1][f[i][1] - 2] == 0 ? 1 : 0;
        }
        return A;
    }

    public int[][] flipChess1(int[][] A, int[][] f) {
        int z[][] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        for (int i = 0; i < f.length; i++) {
            for (int j = 0; j < z.length; j++) {
                int x = f[i][0] - 1 + z[j][0], y = f[i][1] - 1 + z[j][1];
                if (x >= 0 && x <= 3 && y >= 0 && y <= 3) A[x][y] ^= 1;
            }
        }
        return A;
    }

}
